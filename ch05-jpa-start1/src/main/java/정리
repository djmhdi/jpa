단방향 매핑과 비교해서 양방향 매핑은 복잡하다. 연과관계의 주인도 정해야 하고, 
두 개의 단방향 연과관계를 양방향으로 만들기 위해 로직도 잘 관리해야 한다.
중요한 사실은 연과관계가 하나인 단방향 매핑은 언제나 연관관계ㅖ의 주인이라는 점이다.
양방향은 여기에 주인이 아닌 연관관계를 하나 추가했을 뿐이다. 결국 단방향과 비교해서
"양방향의 장점은 반대방향으로 객체 그래프 탐색 기능이 추가된 것뿐이다."

주인의 반대편은 mappedBy로 주인을 지정해야 한다. 그리고 주인의 반대편은 단순히 보여주는 일(객체 그래프 탐색)만 할 수 있다.
- 단방향 매핑만으로 테이블과 객체의 연관관계 매핑은 이미 완료되었다.
- 단방향을 양방향으로 만들면 반대방향으로 객체 그래프 탐색 기능이 추가된다.
- 양뱡향 연관관계를 매핑하려면 객체에서 양쪽 방향으로 모두 관리해야 한다.

양방향 매핑은 복잡하다. 우선 단방향 매핑을 사용하고 반대 방향으로 객체 그래프 탐색(JPQL 쿼리 탐색 포함)이 필요할 때
양방향을 사용하도록 코드를 추가해도 된다.

연관관계의 주인을 정하는 기준
단방향은 항상 외래 키가 있는 곳을 기준으로 매핑하면 된다. 하지만 양방향은 연관관계의 주인은 비즈니스 로직상 더 중요하다고
연관관계의 주인으로 선택하면 안된다. 비즈니스 중요도를 배제하고 단순히 외래 키 관리자 정도의 의미만 부여해야 한다.
"연관관계의 주인은 외래 키의 위치와 관련해서 정해야지 비즈니스 중요도로 접근하면 안된다."

참고
데이터베이스 테이블의 다대일, 일대다 관계에서 항상 다 쪽이 외래 키를 가지낟. 다 쪽인 @ManyToOne은 항상 연관관계 주인이 되므로
mappedBy를 설정할 수 없다. 따라서 @ManyToOne에는 mappedBy 속성이 없다.
